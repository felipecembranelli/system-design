using System.Collections.Generic;

public class HashDistributionSample
    {
        // Distribute a list of products evenly (as much as possible) among 3 queues using a hash function
        public int Process(bool defaultHashFunction, int numberOfQueues, string item)
        {
            int hash;
                
            if (defaultHashFunction) hash = this.DefaultHashFunction(item);
            else hash = this.HashFunction(item);

            int queueId = hash % numberOfQueues;
            
            return queueId;

        }

        // Sample implementation of hash function
        private int HashFunction(object key)
        {
            int index = 7;
            int asciiVal = 0;

            for (int i = 0; i < key.ToString().Length; i++)
            {
                asciiVal = (int)key.ToString()[i] * i;
                index = index * 31 + asciiVal;
            }
            return index;
        }

        // Return a number generated by default dotnet hash fuction
        // Note: GetHashCode() is not guaranteed to be unique and can change between builds.
        // https://andrewlock.net/why-is-string-gethashcode-different-each-time-i-run-my-program-in-net-core/
        private int DefaultHashFunction(object key)
        {
            var hash = (int)(key.ToString().GetHashCode());

            if (hash < 0) return hash * -1;
            else return hash;
        }
        
    }